#!/usr/bin/env bash
#
# bootstrap installs things.
#

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
	printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

success_all () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1 [ \033[00;32mOK\033[0m ]\n"
}

fail () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
	echo ''
	exit
}

setup_gitconfig () {
	local git_host=$1 git_config_name=${2:-"github"} git_url=${3:-""}
	local git_private=
	if ! [ -f git/gitconfig_${git_config_name}.symlink ]
	then
		info 'configure '"gitconfig_${git_config_name}"''

		git_credential='netrc'

		user ' - What'"'"'s your "'${git_config_name}'" author name?'
		read -e git_authorname
		user ' - What'"'"'s your "'${git_config_name}'" user name?'
		read -e git_username
		if [ "$git_config_name" == "github" ]
		then
			user ' - Is your author email private? (yes|no)'
			read -e git_private
		fi
		if ! [ "$git_private" == "yes" ]
		then
			user ' - What'"'"'s your "'${git_config_name}'" author email?'
			read -e git_authoremail
		else
			git_private="$(curl -L -s "https://api.github.com/users/${git_username}"|grep \"id\":|cut -d ":" -f 2|tr -d " "|tr -d ",")"
			git_authoremail="${git_private}+${git_username}@users.noreply.github.com"
		fi
		git_signingkey="$(gpg --list-keys --with-colons ${git_authoremail} | awk -F: '/^pub:/ { print $5 }')"
		sleep 1
		info "found key ${git_signingkey}"
		if [ "$git_signingkey" == "" ]
		then
			user ' - What'"'"'s your "'${git_config_name}'" signingkey?'
			read -e git_signingkey
		fi

		user ' - What'"'"'s your proxy? (If you don'"'"'t have one, hit Enter)'
		read -e git_proxy

		sed -e "s/AUTHORNAME/$git_authorname/g"								\
				-e "s/USERNAME/$git_username/g"										\
				-e "s/GIT_SIGNINGKEY/$git_signingkey/g"								\
				-e "s/AUTHOREMAIL/$git_authoremail/g"							\
				-e "s/GIT_CREDENTIAL_HELPER/$git_credential/g"		\
				-e "s#GIT_PROXY#$git_proxy#g"											\
				git/gitconfig_local.symlink.example > git/gitconfig_${git_config_name}.symlink
		if ! [ "$git_config_name" == "github" ]
		then
			echo "hub-new-repo = \"!REPO=\$(basename \$PWD) GHUSER=\$(git config --get github.user) PROXY=\$(git config --get http.proxy);echo 'creating \\\"'\$REPO'\\\" on ${git_url}? - Then type your OTP:';read OTP;curl -x \\\"\$PROXY\\\" -u \\\"\$GHUSER\\\" -H \\\"accept: application/json\\\" -H \\\"Content-Type: application/json\\\" -H \\\"X-${git_host}-OTP: \$OTP\\\" -d {\\\\\\\"name\\\\\\\":\\\\\\\"\$REPO\\\\\\\"} ${git_url}/api/v1/user/repos ;git remote add origin ${git_url}/\$GHUSER/\$REPO.git;git push origin master\"" >> git/gitconfig_${git_config_name}.symlink
			echo "[includeIF \"gitdir/i:~/git/${git_config_name}/\"]" >> git/gitconfig_includes.symlink
			echo "	path = ~/.gitconfig_${git_config_name}" >> git/gitconfig_includes.symlink
		else
			echo "[include]" >> git/gitconfig_includes.symlink
			echo "	path = ~/.gitconfig_includes" >> git/gitconfig_includes.symlink
		fi

		success "gitconfig_${git_config_name}"
	fi

}

which_gitconfig () {
	while true
	do
		user "choose git config to create:\n
					git[H]ub, git[E]a, [N]one?"
		read -n 1 action

		case "$action" in
			H )
				info "chose: github"
				setup_gitconfig Github
				;;
			E )
				info "chose: gitea"
				user "enter url:"
				read -e git_url
				user "enter config filename:"
				read -e git_config_name
				setup_gitconfig Gitea $git_config_name $git_url
				;;
			N )
				break
				;;
			* )
				;;
		esac
	done
}

link_file () {
	local src=$1 dst=$2

	local overwrite= backup= skip=
	local action=

	if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
	then

		if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
		then

			local currentSrc="$(readlink $dst)"

			if [ "$currentSrc" == "$src" ]
			then

				skip=true;

			else

				user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
				[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read -n 1 action

				case "$action" in
					o )
						info "chose: overwrite"
						overwrite=true;;
					O )
						info "chose: overwrite ALL"
						overwrite_all=true;;
					b )
						info "chose: backup"
						backup=true;;
					B )
						info "chose: backup ALL"
						backup_all=true;;
					s )
						info "chose: skip"
						skip=true;;
					S )
						info "chose: skip ALL"
						skip_all=true;;
					* )
						info "chose: nothing"
						;;
				esac

			fi
		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [ "$overwrite" == "true" ]
		then
			rm -rf "$dst"
			success "removed $dst"
		fi

		if [ "$backup" == "true" ]
		then
			mv "$dst" "${dst}.backup"
			success "moved $dst to ${dst}.backup"
		fi

		if [ "$skip" == "true" ]
		then
			success "skipped $src"
		fi
	fi

	if [ "$skip" != "true" ] # "false" or empty
	then
		ln -s "$1" "$2"
		success "linked $1 to $2"
	fi
}

install_dotfiles () {
	info 'installing dotfiles'
	
	local overwrite_all=false backup_all=false skip_all=false
	
	for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
	do
		dst="$HOME/.$(basename "${src%.*}")"
		info "linking $src to $dst"
		link_file "$src" "$dst"
	done
}


#setup_gitconfig
which_gitconfig
install_dotfiles

echo ''
success_all 'Everything is installed!'
